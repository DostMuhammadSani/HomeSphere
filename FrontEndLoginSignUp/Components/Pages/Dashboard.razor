@page "/dashboard"
@using System.Drawing
@inject UserService UserService
@using Blazored.SessionStorage
@inject ISessionStorageService SessionStorage
@using System.Security.Claims
@using ClassLibraryModel
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

@if (role == "Admin")
{
            <!-- Dashboard Layout -->
            <div class="container-fluid">
                <div class="row">
                    <Sidebars></Sidebars>
                    <div class="col-md-10 p-4">
                        <!-- Top Nav -->
                        <div class="top-nav d-flex justify-content-between align-items-center mb-4 p-3">
                            <!-- Search Bar -->
                            <div class="search-bar">
                                <input type="text" class="form-control" placeholder="Search here">
                            </div>
                            <!-- Icons Section -->
                            <div class="icons-section d-flex align-items-center">
                                <div class="icon-wrapper position-relative mr-4">
                                    <img src="icons/notifications.png" class="nav-icon" alt="Notification">
                                </div>
                                <div class="icon-wrapper position-relative mr-4">
                                    <img src="icons/emails.png" class="nav-icon" alt="Chat">
                                </div>
                                <div class="icon-wrapper position-relative mr-4">
                                    <img src="icons/setting.png" class="nav-icon" alt="Settings">
                                </div>
                            </div>
                        </div>
                        <!-- Statistics Section -->
                        <div class="row text-center mb-4 px-4">
                            <div class="col-md-3">
                                <div class="card stats-card">
                                    <div class="card-body">
                                        <img src="icons/profile.png" alt="Residents Icon" class="stats-icon">
                                        <h3>@count[0].CResident</h3>
                                        <p>Total Residents</p>
                                        <span class="text-success">+3% (30 days)</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card stats-card">
                                    <div class="card-body">
                                        <img src="icons/land.png" alt="Plots Icon" class="stats-icon">
                                        <h3>@count[0].CPlot</h3>
                                        <p>Total Plots</p>
                                        <span class="text-success">+5% (30 days)</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card stats-card">
                                    <div class="card-body">
                                        <img src="icons/key.png" alt="Ownership Icon" class="stats-icon">
                                        <h3>@count[0].COwnShip</h3>
                                        <p>Total Ownerships</p>
                                        <span class="text-danger">-2% (30 days)</span>
                                    </div>
                                </div>
                            </div>
                                <div class="col-md-3">
                                    <div class="card stats-card">
                                        <div class="card-body">
                                            <img src="icons/cleaning-staff.png" alt="Staff Icon" class="stats-icon">
                                            <h3>@count[0].CStaff</h3>
                                            <p>Total Staff</p>
                                            <span class="text-success">+3% (30 days)</span>
                                        </div>
                                    </div>
                                </div>
                        </div >
                        <ProgressCircle></ProgressCircle>
                        <div class="charts">
                        <DoughnutChar></DoughnutChar>
                             <DoughnutChar1></DoughnutChar1>
                        </div>
                    </div>
                </div>
            </div>


}


<style>
    /* Container */
    .row {
        background-color: #f6f6fb;
    }
    .top-nav {
        background-color: #f6f6fb;
    }

    /* Search Bar */
    .search-bar .form-control {
        width: 300px;
        border: none;
        border-radius: 12px;
        padding: 10px 15px;
        font-size: 14px;
        background-color: #ffffff;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    }

    /* Icons Section */
    .icons-section .icon-wrapper  {
        width: 30px;
        height: 30px;
        margin-right: 20px;
    }

    .nav-icon {
        width: 100%;
        height: auto;
    }

    .badge {
        background-color: #ff6b6b;
        color: white;
        font-size: 12px;
        padding: 3px 6px;
        border-radius: 50%;
        top: -5px;
        right: -5px;
    }

    /* Filter Period */
    .btn-filter-period {
        background-color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 500;
        border-radius: 12px;
        display: flex;
        align-items: center;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    }

    .calendar-icon {
        width: 20px;
        height: auto;
        margin-right: 10px;
    }

    /* User Profile */
    .user-profile .user-greeting {
        font-size: 16px;
        color: #4a4a4a;
    }

    .profile-img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    /* Stats Cards */
    .stats-card {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.05);
    }

    .stats-icon {
        width: 50px;
        height: 50px;
        margin-bottom: 10px;
    }

    .card-body h3 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    .card-body p {
        font-size: 1rem;
        margin-bottom: 0.5rem;
    }

    .card-body span {
        font-size: 0.8rem;
    }

    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }
    .charts{
        display:flex;
    }
</style>

@code {
    private string A_id;
    private string token;
    public string role;
    public List<CountModel> count = new List<CountModel>();

  

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await SessionStorage.GetItemAsync<string>("authToken");
                var claims = RoleFetch.ParseClaimsFromJwt(token);
                var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                role = roleClaim?.Value;

                var client = HttpClientFactory.CreateClient("AuthApi");
                var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
                var response1 = await client.GetAsync(url);
                if (response1.IsSuccessStatusCode)
                {
                    A_id = await response1.Content.ReadAsStringAsync();
                    var response = await client.GetAsync($"api/Resident/Count?A_id={A_id}");
                    if (response.IsSuccessStatusCode)
                    {
                        count = await response.Content.ReadFromJsonAsync<List<CountModel>>();
                    }

                   
                    
                    // Call chart rendering method

                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving token: {ex.Message}");
            }
        }
        await base.OnInitializedAsync();
    }

   

    


}
