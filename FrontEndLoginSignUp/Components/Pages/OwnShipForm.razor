@using System.ComponentModel.DataAnnotations
@using ClassLibraryModel
@using DALLibrary
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@rendermode InteractiveServer

<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title">Add Ownership</h4>
        <EditForm Model="OwnShip" OnValidSubmit="HandleSubmit" >
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group position-relative">
                <label for="plotID">PlotID</label>
                <InputText id="plotID" class="form-control" @bind-Value="OwnShip.PlotID" @oninput="OnPlotSearchChanged" />

                <div class="dropdown-menu dropdown-list"
                     style="display: @(isPlotDropdownVisible ? "block" : "none");">
                    @foreach (var plot in filteredPlots)
                    {
                        <div class="dropdown-item" @onclick="() => SelectPlot(plot)">
                            @plot.PlotNumber (@plot.PlotID)
                        </div>
                    }
                </div>
            </div>

            <div class="form-group position-relative">
                <label for="cnic">CNIC</label>
                <InputText id="cnic" class="form-control" @bind-Value="OwnShip.CNIC" @oninput="OnResidentSearchChanged" />

                <div class="dropdown-menu dropdown-list"
                     style="display: @(isResidentDropdownVisible ? "block" : "none");">
                    @foreach (var resident in filteredResidents)
                    {
                        <div class="dropdown-item" @onclick="() => SelectResident(resident)">
                            @resident.Names (@resident.CNIC)
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <label for="purchaseDate">Purchase Date</label>
                <InputDate id="purchaseDate" class="form-control" @bind-Value="OwnShip.PurchaseDate" required />
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success mt-3">
                @SuccessMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-3">
                @ErrorMessage
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public OwnShipModel OwnShip { get; set; } = new OwnShipModel();
    [Parameter] public EventCallback<OwnShipModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    public string HS_Name { get; set; }
    public string ErrorMessage { get; set; }
    public string SuccessMessage { get; set; }
    public string A_id { get; set; }
    private List<PlotModel> plots = new List<PlotModel>();
    private List<PlotModel> filteredPlots = new List<PlotModel>();
    private List<Resident> residents = new List<Resident>();
    private List<Resident> filteredResidents = new List<Resident>();
    private bool isPlotDropdownVisible = false;
    private bool isResidentDropdownVisible = false;


    protected override async Task OnInitializedAsync()
    {
        HS_Name = UserService.Username;
        await LoadPlots();
        await LoadResident();
    }

    private void OnPlotSearchChanged(ChangeEventArgs args)
    {
        var searchTerm = args.Value?.ToString()?.Trim() ?? string.Empty;
        isPlotDropdownVisible = !string.IsNullOrWhiteSpace(searchTerm);

        filteredPlots = plots
            .Where(plot => plot.PlotNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                           plot.PlotID.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OnResidentSearchChanged(ChangeEventArgs args)
    {
        var searchTerm = args.Value?.ToString()?.Trim() ?? string.Empty;
        isResidentDropdownVisible = !string.IsNullOrWhiteSpace(searchTerm);

        filteredResidents = residents
            .Where(resident => resident.Names.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                               resident.CNIC.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void CloseDropdowns()
    {
        isPlotDropdownVisible = false;
        isResidentDropdownVisible = false;
    }



    private void SelectPlot(PlotModel plot)
    {
        if (plot != null)
        {
            OwnShip.PlotID = plot.PlotID?.Trim();
            CloseDropdowns();
            filteredPlots.Clear();
        }
        else
        {
            ErrorMessage = "Failed to select the plot. Plot information is null.";
        }
    }


    private void SelectResident(Resident resident)
    {
        OwnShip.CNIC = resident.CNIC;
        CloseDropdowns();
        filteredResidents.Clear(); // Clear the dropdown after selection
    }


    private async Task HandleSubmit()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        await LoadPlots();

        try
        { 
            Console.WriteLine($"OwnShip.PlotID: {OwnShip.PlotID}");
            foreach (var plot in plots)
            {
                Console.WriteLine($"PlotID: {plot.PlotID}");
            }
            var selectedPlot = plots.FirstOrDefault(p => p.PlotID == OwnShip.PlotID);
            if (selectedPlot == null || selectedPlot.SoldStatus != "Available")
            {
                ErrorMessage = "The selected plot is no longer available.";
                return;
            }

            var client = HttpClientFactory.CreateClient("AuthApi");
            Guid Id = Guid.NewGuid();
            OwnShip.OwnID = Id.ToString();

          

            var response = await client.PostAsJsonAsync("api/OwnShip", OwnShip);

            if (response.IsSuccessStatusCode)
            {
                // Update the plot's SoldStatus
                selectedPlot.SoldStatus = "Sold";

                var response1 = await client.PutAsJsonAsync("api/Plot", selectedPlot);

                if (response1.IsSuccessStatusCode)
                {
                    SuccessMessage = "Ownership added successfully, and plot status updated.";
                    await OnSave.InvokeAsync(OwnShip);
                }
            }
            else
            {
                ErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }


    private void Cancel()
    {
        OnCancel.InvokeAsync();
    }



    // Load plots and initialize the filtered list
    // Load plots and initialize the filtered list

    private void FilterPlots(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        filteredPlots = plots
            .Where(plot => plot.PlotNumber.Contains(input, StringComparison.OrdinalIgnoreCase)
                        || plot.PlotID.Contains(input, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    // Filtering residents based on user input
    private void FilterResidents(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        filteredResidents = residents
            .Where(resident => resident.Names.Contains(input, StringComparison.OrdinalIgnoreCase)
                            || resident.CNIC.Contains(input, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }


    private async Task LoadPlots()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
        var response1 = await client.GetAsync(url);
        if (response1.IsSuccessStatusCode)
        {
            A_id = await response1.Content.ReadAsStringAsync();
            var response = await client.GetAsync($"api/Plot?A_id={A_id}");
            if (response.IsSuccessStatusCode)
            {
                var allPlots = await response.Content.ReadFromJsonAsync<List<PlotModel>>();

                // Filter plots based on SoldStatus
                plots = allPlots.Where(plot => plot.SoldStatus == "Available").ToList();
                filteredPlots = plots; // Initialize filtered list with available plots
            }
        }
    }


    // Load residents and initialize the filtered list
    private async Task LoadResident()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
        var response1 = await client.GetAsync(url);
        if (response1.IsSuccessStatusCode)
        {
             A_id = await response1.Content.ReadAsStringAsync();
            var response = await client.GetAsync($"api/Resident?A_id={A_id}");
            if (response.IsSuccessStatusCode)
            {
                residents = await response.Content.ReadFromJsonAsync<List<Resident>>();
                filteredResidents = residents; // Initialize filtered list with all residents
            }
        }
    }
}

<style>
    .dropdown-list {
        position: absolute;
        z-index: 1050; /* Ensure higher than other elements */
        background: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        width: 100%;
    }

    .dropdown-item {
        padding: 10px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .dropdown-item:hover {
            background-color: #f1f1f1;
        }


</style>