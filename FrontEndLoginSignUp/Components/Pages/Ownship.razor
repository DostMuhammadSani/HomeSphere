@page "/ownship"
@rendermode InteractiveServer
@using System.Collections.Generic
@using System.Linq
@using ClassLibraryModel
@using DALLibrary
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@using Blazored.SessionStorage
@using System.Security.Claims
@inject ISessionStorageService SessionStorage

@if (role == "Admin")
{
            <div style="display: flex; flex-direction: row; background-color: #f8f9fa;">
                <Sidebars></Sidebars>
                <div style="width: 80%; margin: 40px;">
                    <div style="background-color: white; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px;">
                        <h2 style="text-align: center; margin-bottom: 20px; color: #333;">Ownership Management</h2>

                        <!-- Search Box -->
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <input @bind="searchText" style="width: 60%; padding: 10px; border-radius: 5px; border: 1px solid #ccc;" placeholder="Search by OwnID, PlotID, or CNIC" />
                    <button style="background-color: #1b6cb9; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="SearchOwnShips">Search</button>
                        </div>

                        <!-- Add OwnShip Button -->
                        <div style="text-align: right; margin-bottom: 20px;">
                    <button style="background-color: #1b6cb9; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="AddNewOwnShip">Add Ownership</button>
                        </div>
                            <!-- OwnShip Form -->
                @if (showForm)
                {
                                        <div style="margin-top: 20px;">
                        @if (currentOwnShip.OwnID == null)
                        {
                                                    <OwnShipForm OwnShip="currentOwnShip" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                        else
                        {
                                                    <UpdateOwnShip OwnShip="currentOwnShip" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                                        </div>
                }

                        <!-- Data Table -->
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                        <tr style="background-color: #1b6cb9; color: white;">
                                    <th style="padding: 10px; border: 1px solid #ddd;">OwnID</th>
                                    <th style="padding: 10px; border: 1px solid #ddd;">PlotID</th>
                                    <th style="padding: 10px; border: 1px solid #ddd;">CNIC</th>
                                    <th style="padding: 10px; border: 1px solid #ddd;">Purchase Date</th>
                                    <th style="padding: 10px; border: 1px solid #ddd;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                        @if (filteredOwnShips.Any())
                        {
                            @foreach (var ownShip in filteredOwnShips)
                            {
                                            <tr style="background-color: #f8f9fa;">
                                                <td style="padding: 10px; border: 1px solid #ddd;">@ownShip.OwnID</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@ownShip.PlotID</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@ownShip.CNIC</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@ownShip.PurchaseDate.ToShortDateString()</td>
                                                <td style="padding: 10px; border: 1px solid #ddd; text-align: center;">
                                        <button style="background-color:#1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; margin-right: 5px; cursor: pointer;" @onclick="() => EditOwnShip(ownShip)">Update</button>
                                        <button style="background-color: #1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; cursor: pointer;" @onclick="() => DeleteOwnShip(ownShip.OwnID)">Delete</button>
                                                </td>
                                            </tr>
                            }
                        }
                        else
                        {
                                    <tr>
                                        <td colspan="5" style="padding: 20px; text-align: center; color: #888;">No ownership records found</td>
                                    </tr>
                        }
                            </tbody>
                        </table>

                        
                    </div>
                </div>
            </div>
}

@code {
    private List<OwnShipModel> ownShips = new List<OwnShipModel>();
    private List<OwnShipModel> filteredOwnShips = new List<OwnShipModel>();
    private OwnShipModel currentOwnShip;
    private bool showForm;
    private string A_id;
    private string token;
    public string role;
    private string searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await SessionStorage.GetItemAsync<string>("authToken");
                var claims = RoleFetch.ParseClaimsFromJwt(token);
                var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                role = roleClaim.Value;
                StateHasChanged();
                await LoadOwnShips();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving token: {ex.Message}");
            }
        }
    }

    private async Task LoadOwnShips()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
        var response1 = await client.GetAsync(url);
        if (response1.IsSuccessStatusCode)
        {
            A_id = await response1.Content.ReadAsStringAsync();
            var response = await client.GetAsync($"api/OwnShip?A_id={A_id}");
            if (response.IsSuccessStatusCode)
            {
                ownShips = await response.Content.ReadFromJsonAsync<List<OwnShipModel>>();
                filteredOwnShips = ownShips; // Initialize filtered list with all ownerships
            }
        }
    }

    private void AddNewOwnShip()
    {
        currentOwnShip = new OwnShipModel(); // Initialize a new OwnShip for adding
        showForm = true;
    }

    private void EditOwnShip(OwnShipModel ownShip)
    {
        currentOwnShip = ownShip; // Use the selected OwnShip for editing
        showForm = true;
    }

    private async void DeleteOwnShip(string ownShipId)
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var response = await client.DeleteAsync($"api/OwnShip?OwnID={ownShipId}");

        if (response.IsSuccessStatusCode)
        {
            var ownShipToRemove = ownShips.FirstOrDefault(o => o.OwnID == ownShipId);
            if (ownShipToRemove != null)
            {
                ownShips.Remove(ownShipToRemove);
                filteredOwnShips.Remove(ownShipToRemove);
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to delete ownership with OwnID {ownShipId}. Status code: {response.StatusCode}");
        }
    }

    private void SearchOwnShips()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            filteredOwnShips = ownShips;
        }
        else
        {
            filteredOwnShips = ownShips.Where(o =>
                o.OwnID.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                o.PlotID.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                o.CNIC.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async void HandleSave(OwnShipModel savedOwnShip)
    {
        await LoadOwnShips();

        showForm = false; // Hide the form after saving
        StateHasChanged();
    }

    private void HandleCancel()
    {
        showForm = false; // Hide the form without saving
    }
}
