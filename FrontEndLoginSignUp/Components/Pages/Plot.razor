@page "/plot"
@rendermode InteractiveServer
@using System.Collections.Generic
@using System.Linq
@using ClassLibraryModel
@using DALLibrary
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@using Blazored.SessionStorage
@using System.Security.Claims
@inject ISessionStorageService SessionStorage

@if (role == "Admin")
{
        <div style="display: flex; flex-direction: row; background-color: #f8f9fa;">
            <Sidebar></Sidebar>
            <div style="width: 80%; margin: 40px;">
                <div style="background-color: white; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px;">
                    <h2 style="text-align: center; margin-bottom: 20px; color: #333;">Plots Management</h2>

                    <!-- Search Box -->
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <input @bind="searchText" style="width: 60%; padding: 10px; border-radius: 5px; border: 1px solid #ccc;" placeholder="Search by PlotID, Plot Number, or Size" />
                        <button style="background-color: #343a40; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="SearchPlots">Search</button>
                    </div>

                    <!-- Add Plot Button -->
                    <div style="text-align: right; margin-bottom: 20px;">
                        <button style="background-color: #343a40; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="AddNewPlot">Add Plot</button>
                    </div>
                @if (showForm)
                {
                                    <div style="margin-top: 20px;">
                        @if (currentPlot.PlotID == null)
                        {
                                                    <PlotForm Plot="currentPlot" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                        else
                        {
                                                    <UpdatePlot Plot="currentPlot" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                                    </div>
                }
                    <!-- Data Table -->
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                            <tr style="background-color: #343a40; color: white;">
                                <th style="padding: 10px; border: 1px solid #ddd;">PlotID</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Plot Number</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Size</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Status</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        @if (filteredPlots.Any())
                        {
                            @foreach (var plot in filteredPlots)
                            {
                                            <tr style="background-color: #f8f9fa;">
                                                <td style="padding: 10px; border: 1px solid #ddd;">@plot.PlotID</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@plot.PlotNumber</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@plot.Size</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@plot.SoldStatus</td>
                                                <td style="padding: 10px; border: 1px solid #ddd; text-align: center;">
                                                    <button style="background-color:#343a40; border: none; padding: 5px 10px; border-radius: 5px; color: white; margin-right: 5px; cursor: pointer;" @onclick="() => EditPlot(plot)">Update</button>
                                                    <button style="background-color: #343a40; border: none; padding: 5px 10px; border-radius: 5px; color: white; cursor: pointer;" @onclick="() => DeletePlot(plot.PlotID)">Delete</button>
                                                </td>
                                            </tr>
                            }
                        }
                        else
                        {
                                    <tr>
                                        <td colspan="5" style="padding: 20px; text-align: center; color: #888;">No plots found</td>
                                    </tr>
                        }
                        </tbody>
                    </table>

                    <!-- Plot Form -->
               
                </div>
            </div>
        </div>
}

@code {
    private List<PlotModel> plots = new List<PlotModel>();
    private List<PlotModel> filteredPlots = new List<PlotModel>();
    private PlotModel currentPlot;
    private bool showForm;
    private string A_id;
    private string token;
    public string role;
    private string searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await SessionStorage.GetItemAsync<string>("authToken");
                var claims = RoleFetch.ParseClaimsFromJwt(token);
                var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                role = roleClaim.Value;
                StateHasChanged();
                await LoadPlots();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving token: {ex.Message}");
            }
        }
    }

    private async Task LoadPlots()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
        var response1 = await client.GetAsync(url);
        if (response1.IsSuccessStatusCode)
        {
            A_id = await response1.Content.ReadAsStringAsync();
            var response = await client.GetAsync($"api/Plot?A_id={A_id}");
            if (response.IsSuccessStatusCode)
            {
                plots = await response.Content.ReadFromJsonAsync<List<PlotModel>>();
                filteredPlots = plots; // Initialize filtered list with all plots
            }
        }
    }

    private void AddNewPlot()
    {
        currentPlot = new PlotModel(); // Initialize a new Plot for adding
        showForm = true;
    }

    private void EditPlot(PlotModel plot)
    {
        currentPlot = plot; // Use the selected plot for editing
        showForm = true;
    }

    private async void DeletePlot(string plotId)
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var response = await client.DeleteAsync($"api/Plot?PlotID={plotId}");

        if (response.IsSuccessStatusCode)
        {
            // Remove the plot from the list
            var plotToRemove = plots.FirstOrDefault(p => p.PlotID == plotId);
            if (plotToRemove != null)
            {
                plots.Remove(plotToRemove);
                filteredPlots.Remove(plotToRemove);
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to delete plot with PlotID {plotId}. Status code: {response.StatusCode}");
        }
    }

    private async void HandleSave(PlotModel savedPlot)
    {
        await LoadPlots();

        showForm = false; // Hide the form after saving
        StateHasChanged();
    }

    private void HandleCancel()
    {
        showForm = false; // Hide the form without saving
    }

    private void SearchPlots()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredPlots = plots;
        }
        else
        {
            filteredPlots = plots.Where(p =>
                p.PlotID.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.PlotNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Size.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
