@page "/plot-details/{PlotID}"
@using ClassLibraryModel
@using Microsoft.AspNetCore.Components.Web
@using Blazored.SessionStorage
@using System.Security.Claims
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer

@if (role == "Admin")
{
    <div class="page-container">
        <Sidebars></Sidebars>
        <div class="main-content">
            <div class="container">
                <h3 class="title">Plot Details for PlotID</h3>
                <p><strong>Plot ID:</strong> @PlotID</p>
                @if (isLoading)
                {
                    <p class="loading">Loading...</p>
                }
                else if (plotDetails == null)
                {
                    <p class="error-message">No plot details found </p>
                    <EditForm Model="@newPlotDetails" OnValidSubmit="AddPlotDetails" class="form">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label>Street:</label>
                            <InputText @bind-Value="newPlotDetails.Street" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label>Address:</label>
                            <InputText @bind-Value="newPlotDetails.Addresses" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label>House Status:</label>
                            <select @bind="newPlotDetails.HouseStatus" class="form-control" required>
                                <option>Select Option</option>
                                <option value="Constructed">Constructed</option>
                                <option value="Not Constructed">Not Constructed</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Information:</label>
                            <InputText @bind-Value="newPlotDetails.Information" class="form-control" required />
                        </div>
                        <button type="submit" class="btn btn-primary">Add Plot Details</button>
                    </EditForm>
                }
                else if (isEditing)
                {
                    <EditForm Model="@plotDetails" OnValidSubmit="UpdatePlotDetails" class="form">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label>Street:</label>
                            <InputText @bind-Value="plotDetails.Street" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Address:</label>
                            <InputText @bind-Value="plotDetails.Addresses" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>House Status:</label>
                            <select @bind="newPlotDetails.HouseStatus" class="form-control">
                                <option value="Constructed">Constructed</option>
                                <option value="Not Constructed">Not Constructed</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Information:</label>
                            <InputText @bind-Value="plotDetails.Information" class="form-control" />
                        </div>
                        <div class="button-group">
                            <button type="submit" class="btn btn-success">Update Plot Details</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="plot-details">
                        <h4>Plot Information</h4>
                        <p><strong>Street:</strong> @plotDetails.Street</p>
                        <p><strong>Address:</strong> @plotDetails.Addresses</p>
                        <p><strong>House Status:</strong> @plotDetails.HouseStatus</p>
                        <p><strong>Information:</strong> @plotDetails.Information</p>

                        <div class="button-group">
                            <button class="btn btn-primary" @onclick="StartEditing">Update</button>
                            <button class="btn btn-danger" @onclick="DeletePlotDetails">Delete</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string PlotID { get; set; }

    private PlotDetailsModel plotDetails;
    private PlotDetailsModel newPlotDetails = new PlotDetailsModel();
    private bool isLoading = true;
    private bool isEditing = false;
    private string token;
    public string role;

    [Inject]
    private IJSRuntime JSRun { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadRole();
        await LoadPlotDetails();
    }

    private async Task LoadRole()
    {
        try
        {
            token = await SessionStorage.GetItemAsync<string>("authToken");
            var claims = ParseClaimsFromJwt(token);
            var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            role = roleClaim?.Value;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving token: {ex.Message}");
        }
    }

    private async Task LoadPlotDetails()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        try
        {
            var response = await client.GetAsync($"api/PlotDetails/{PlotID}");
            if (response.IsSuccessStatusCode)
            {
                plotDetails = await response.Content.ReadFromJsonAsync<PlotDetailsModel>();
            }
            else
            {
                plotDetails = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching plot details: {ex.Message}");
            plotDetails = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddPlotDetails()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newPlotDetails.HouseStatus) ||
                string.IsNullOrWhiteSpace(newPlotDetails.Street) ||
                string.IsNullOrWhiteSpace(newPlotDetails.Addresses) ||
                string.IsNullOrWhiteSpace(newPlotDetails.Information))
            {
                await JSRun.InvokeVoidAsync("alert", "Fields are Missing");
                return;
            }

            Guid Id = Guid.NewGuid();
            newPlotDetails.PDID = Id.ToString();
            newPlotDetails.PlotID = PlotID;

            Console.WriteLine($"PlotID: {newPlotDetails.PlotID}, PDID: {newPlotDetails.PDID}, HouseStatus: {newPlotDetails.HouseStatus}, Street: {newPlotDetails.Street}, Addresses: {newPlotDetails.Addresses}, Information: {newPlotDetails.Information}");

            var client = HttpClientFactory.CreateClient("AuthApi");
            var response = await client.PostAsJsonAsync("api/PlotDetails", newPlotDetails);

            if (response.IsSuccessStatusCode)
            {
                plotDetails = await response.Content.ReadFromJsonAsync<PlotDetailsModel>();
                newPlotDetails = new PlotDetailsModel();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Error: Status Code {response.StatusCode}, Response: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdatePlotDetails()
    {
        string errorMessage = "";
        if (plotDetails != null)
        {
            var client = HttpClientFactory.CreateClient("AuthApi");
            var response = await client.PutAsJsonAsync($"api/PlotDetails/{PlotID}", plotDetails);
            if (response.IsSuccessStatusCode)
            {
                isEditing = false;
                await LoadPlotDetails();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating plot details: {errorMessage}");
            }
        }
    }

    private void StartEditing()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
        LoadPlotDetails();
    }

    private async Task DeletePlotDetails()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var response = await client.DeleteAsync($"api/PlotDetails/{PlotID}");
        if (response.IsSuccessStatusCode)
        {
            plotDetails = null;
        }
        else
        {
            Console.WriteLine("Error deleting plot details.");
        }
    }

    private IEnumerable<Claim> ParseClaimsFromJwt(string jwt)
    {
        var payload = jwt.Split('.')[1];
        var jsonBytes = ParseBase64WithoutPadding(payload);
        var keyValuePairs = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonBytes);
        return keyValuePairs.Select(kvp => new Claim(kvp.Key, kvp.Value.ToString()));
    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }
}

<style>
    .page-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
    }

    .main-content {
        flex: 1;
        padding: 20px;
        background-color: #f8f9fa;
    }

    .container {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 20px auto;
        max-width: 600px;
    }

    .title {
        color: #007bff;
        margin-bottom: 20px;
    }

    .loading, .error-message {
        color: #ff3333;
    }

    .form {
        margin-top: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .button-group {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .plot-details {
        margin-top: 20px;
    }

    @@media (max-width: 768px) {
        .page-container {
            flex-direction: column;
        }

        .main-content {
            padding: 15px;
        }

        .container {
            padding: 1.5rem;
        }
    }
</style>