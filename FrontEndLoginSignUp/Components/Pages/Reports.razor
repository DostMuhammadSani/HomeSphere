@page "/reports"
@using System.Drawing
@inject UserService UserService
@using Blazored.SessionStorage
@inject ISessionStorageService SessionStorage
@using System.Security.Claims
@using ClassLibraryModel
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@using iTextSharp.text
@using iTextSharp.text.pdf
@using System.IO

@if (role == "Admin")
{
    <!-- Dashboard Layout -->
    <div class="container-fluid">
        <div class="row">
            <Sidebars></Sidebars>
            <div class="col-md-10 p-4">
                <!-- Header Section -->
                <div class="dashboard-header mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h1 class="dashboard-title">Financial Reports</h1>
                            <p class="dashboard-subtitle">Generate, view and analyze financial performance</p>
                        </div>
                        <div class="d-flex">
                            <button class="btn btn-primary me-2" @onclick="OpenCreateModal">
                                <i class="fas fa-plus me-2"></i>New Report
                            </button>
                            <button class="btn btn-success" @onclick="ToggleGenerateModal">
                                <i class="fas fa-calculator me-2"></i>Generate
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Reports Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="card summary-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="summary-icon-container bg-primary-light">
                                        <i class="fas fa-file-invoice-dollar text-primary"></i>
                                    </div>
                                    <div class="ms-3">
                                        <h6 class="mb-0">Total Reports</h6>
                                        <h3 class="mb-0">@reports?.Count</h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card summary-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="summary-icon-container bg-success-light">
                                        <i class="fas fa-chart-line text-success"></i>
                                    </div>
                                    <div class="ms-3">
                                        <h6 class="mb-0">Profitable Reports</h6>
                                        <h3 class="mb-0">@reports?.Count(r => r.NetBalance >= 0)</h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card summary-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="summary-icon-container bg-danger-light">
                                        <i class="fas fa-exclamation-triangle text-danger"></i>
                                    </div>
                                    <div class="ms-3">
                                        <h6 class="mb-0">Loss Reports</h6>
                                        <h3 class="mb-0">@reports?.Count(r => r.NetBalance < 0)</h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Reports Table -->
                <div class="card">
                    <div class="card-header bg-white border-bottom-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">All Financial Reports</h5>
                            <div class="input-group search-box" style="width: 300px;">
                                <span class="input-group-text bg-transparent">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search reports..."
                                       @bind="searchTerm" @oninput="FilterReports" />
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Loading reports...</p>
                            </div>
                        }
                        else if (!filteredReports.Any())
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-file-alt fa-4x text-muted mb-4"></i>
                                <h4>No reports found</h4>
                                <p class="text-muted">Create or generate your first financial report</p>
                                <button class="btn btn-primary mt-3" @onclick="OpenCreateModal">
                                    <i class="fas fa-plus me-2"></i>Create Report
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover align-middle">
                                    <thead>
                                        <tr class="table-light">
                                            <th style="width: 30%;">Report Details</th>
                                            <th style="width: 15%;">Period</th>
                                            <th style="width: 15%;" class="text-end">Income</th>
                                            <th style="width: 15%;" class="text-end">Expenses</th>
                                            <th style="width: 15%;" class="text-end">Net Balance</th>
                                            <th style="width: 10%;" class="text-center">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var report in filteredReports)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="report-icon me-3">
                                                            <i class="fas @(report.NetBalance >= 0 ? "fa-chart-line text-success" : "fa-exclamation-triangle text-danger")"></i>
                                                        </div>
                                                        <div>
                                                            <h6 class="mb-1">@report.Title</h6>
                                                            <small class="text-muted">@report.Description</small>
                                                            <div class="mt-1">
                                                                <span class="badge bg-secondary">ID: @report.ReportID.Substring(0, 8)</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="text-muted">@report.StartDate.ToString("MMM d, yyyy")</div>
                                                    <div class="text-muted">to @report.EndDate.ToString("MMM d, yyyy")</div>
                                                </td>
                                                <td class="text-end text-success fw-bold">
                                                    @report.TotalIncome.ToString("C")
                                                </td>
                                                <td class="text-end text-danger fw-bold">
                                                    @report.TotalExpenses.ToString("C")
                                                </td>
                                                <td class="text-end fw-bold @(report.NetBalance >= 0 ? "text-success" : "text-danger")">
                                                    @report.NetBalance.ToString("C")
                                                </td>
                                                <td class="text-center">
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                                type="button" id="reportActions"
                                                                data-bs-toggle="dropdown" aria-expanded="false">
                                                            <i class="fas fa-ellipsis-v"></i>
                                                        </button>
                                                        <ul class="dropdown-menu" aria-labelledby="reportActions">
                                                            <li>
                                                                <button class="dropdown-item" @onclick="@(() => ViewReportDetails(report))" @onclick:preventDefault>
                                                                    <i class="fas fa-eye me-2"></i>View
                                                                </button>
                                                            </li>
                                                            <li>
                                                                <button class="dropdown-item" @onclick="@(() => OpenEditModal(report))" @onclick:preventDefault>
                                                                    <i class="fas fa-edit me-2"></i>Edit
                                                                </button>
                                                            </li>
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li>
                                                                <button class="dropdown-item text-danger" @onclick="@(() => DeleteReport(report))" @onclick:preventDefault>
                                                                    <i class="fas fa-trash me-2"></i>Delete
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                    @if (filteredReports.Any())
                    {
                        <div class="card-footer bg-white border-top-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    Showing <strong>@filteredReports.Count</strong> of <strong>@reports.Count</strong> reports
                                </div>
                                <nav>
                                    <ul class="pagination pagination-sm mb-0">
                                        <li class="page-item disabled">
                                            <a class="page-link" href="#" tabindex="-1">Previous</a>
                                        </li>
                                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                                        <li class="page-item">
                                            <a class="page-link" href="#">Next</a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Create Report Modal -->
    <div class="modal @(showCreateModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Financial Report</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Report Title*</label>
                            <input type="text" class="form-control" @bind="newReport.Title" placeholder="Q1 2023 Financial Report" />
                        </div>
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="3" @bind="newReport.Description"
                                      placeholder="Brief description of the report..."></textarea>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Start Date*</label>
                            <input type="date" class="form-control" @bind="newReport.StartDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">End Date*</label>
                            <input type="date" class="form-control" @bind="newReport.EndDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Income*</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" @bind="newReport.TotalIncome"
                                       step="0.01" min="0" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Expenses*</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" @bind="newReport.TotalExpenses"
                                       step="0.01" min="0" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-12 mb-3">
                            <div class="card bg-light">
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between">
                                        <h6 class="mb-0">Net Balance:</h6>
                                        <h4 class="mb-0 @(newReport.NetBalance >= 0 ? "text-success" : "text-danger")">
                                            @((newReport.TotalIncome - newReport.TotalExpenses).ToString("C"))
                                        </h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseCreateModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateReport"
                            disabled="@(!IsValidReport(newReport))">
                        <i class="fas fa-save me-2"></i>Save Report
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Report Modal -->
    <div class="modal @(showEditModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Financial Report</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Report Title*</label>
                            <input type="text" class="form-control" @bind="editReport.Title" placeholder="Q1 2023 Financial Report" />
                        </div>
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="3" @bind="editReport.Description"
                                      placeholder="Brief description of the report..."></textarea>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Start Date*</label>
                            <input type="date" class="form-control" @bind="editReport.StartDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">End Date*</label>
                            <input type="date" class="form-control" @bind="editReport.EndDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Income*</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" @bind="editReport.TotalIncome"
                                       step="0.01" min="0" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Expenses*</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" @bind="editReport.TotalExpenses"
                                       step="0.01" min="0" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-12 mb-3">
                            <div class="card bg-light">
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between">
                                        <h6 class="mb-0">Net Balance:</h6>
                                        <h4 class="mb-0 @(editReport.NetBalance >= 0 ? "text-success" : "text-danger")">
                                            @((editReport.TotalIncome - editReport.TotalExpenses).ToString("C"))
                                        </h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseEditModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateReport"
                            disabled="@(!IsValidReport(editReport))">
                        <i class="fas fa-save me-2"></i>Update Report
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Generate Report Modal -->
    <div class="modal @(showGenerateModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generate Financial Report</h5>
                    <button type="button" class="btn-close" @onclick="ToggleGenerateModal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i> This will automatically calculate income and expenses
                        for the selected period and generate a comprehensive report.
                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Report Title*</label>
                            <input type="text" class="form-control" @bind="generateReport.Title"
                                   placeholder="Monthly Financial Report - June 2023" />
                        </div>
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="3" @bind="generateReport.Description"
                                      placeholder="Brief description of the generated report..."></textarea>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Start Date*</label>
                            <input type="date" class="form-control" @bind="generateReport.StartDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">End Date*</label>
                            <input type="date" class="form-control" @bind="generateReport.EndDate" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="ToggleGenerateModal">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="GenerateReport"
                            disabled="@(!IsValidGenerateRequest(generateReport))">
                        <i class="fas fa-calculator me-2"></i>Generate Report
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Details Modal -->
    <div class="modal @(showDetailsModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas @(selectedReport?.NetBalance >= 0 ? "fa-chart-line text-success" : "fa-exclamation-triangle text-danger") me-2"></i>
                        @selectedReport?.Title
                    </h5>
                    <button type="button" class="btn-close" @onclick="ToggleDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <p class="text-muted">@selectedReport?.Description</p>
                            <div class="d-flex justify-content-between mb-3">
                                <div>
                                    <small class="text-muted">Report ID</small>
                                    <div>@selectedReport?.ReportID</div>
                                </div>
                                <div>
                                    <small class="text-muted">Period</small>
                                    <div>@selectedReport?.StartDate.ToString("MMM d, yyyy") - @selectedReport?.EndDate.ToString("MMM d, yyyy")</div>
                                </div>
                                <div>
                                    <small class="text-muted">Generated On</small>
                                    <div>@DateTime.Now.ToString("MMM d, yyyy")</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-4">
                            <div class="card summary-card h-100">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="summary-icon-container bg-success-light">
                                            <i class="fas fa-money-bill-wave text-success"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="mb-0">Total Income</h6>
                                            <h3 class="mb-0 text-success">@selectedReport?.TotalIncome.ToString("C")</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card summary-card h-100">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="summary-icon-container bg-danger-light">
                                            <i class="fas fa-receipt text-danger"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="mb-0">Total Expenses</h6>
                                            <h3 class="mb-0 text-danger">@selectedReport?.TotalExpenses.ToString("C")</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card summary-card h-100">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="summary-icon-container @(selectedReport?.NetBalance >= 0 ? "bg-success-light" : "bg-danger-light")">
                                            <i class="fas @(selectedReport?.NetBalance >= 0 ? "fa-chart-line text-success" : "fa-exclamation-triangle text-danger")"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="mb-0">Net Balance</h6>
                                            <h3 class="mb-0 @(selectedReport?.NetBalance >= 0 ? "text-success" : "text-danger")">
                                                @selectedReport?.NetBalance.ToString("C")
                                            </h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="ToggleDetailsModal">
                        <i class="fas fa-times me-2"></i>Close
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="() => PrintReport(selectedReport)">
                        <i class="fas fa-print me-2"></i>Print
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Access Denied Section -->
    <div class="access-denied-container">
        <div class="access-denied-content">
            <div class="denied-icon">
                <i class="fas fa-lock"></i>
            </div>
            <h2>Access Denied</h2>
            <p>You don't have permission to access financial reports.</p>
            <p>Your current role: <strong>@role</strong></p>
            <button class="btn-return" @onclick="NavigateToAppropriatePage">
                Return to @(role == "Shopkeeper" ? "Grocery Management" : "Home")
            </button>
        </div>
    </div>
}

<style>
    /* Base Styles */
    .row {
        background-color: #f8fafc;
    }

    /* Header Styles */
    .dashboard-header {
        padding: 1.5rem 0;
    }

    .dashboard-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .dashboard-subtitle {
        font-size: 0.9rem;
        color: #718096;
        margin-bottom: 0;
    }

    /* Summary Cards */
    .summary-card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .summary-icon-container {
        width: 50px;
        height: 50px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .bg-primary-light {
        background-color: rgba(59, 130, 246, 0.1);
    }

    .bg-success-light {
        background-color: rgba(16, 185, 129, 0.1);
    }

    .bg-danger-light {
        background-color: rgba(239, 68, 68, 0.1);
    }

    /* Table Styles */
    .table {
        --bs-table-bg: transparent;
        --bs-table-striped-bg: rgba(241, 245, 249, 0.5);
    }

        .table th {
            font-weight: 600;
            color: #475569;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
        }

    .report-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background-color: rgba(59, 130, 246, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Search Box */
    .search-box .input-group-text {
        border-right: none;
        background-color: transparent;
    }

    .search-box .form-control {
        border-left: none;
        padding-left: 0;
    }

        .search-box .form-control:focus {
            box-shadow: none;
            border-color: #ced4da;
        }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        border-bottom: 1px solid #e2e8f0;
    }

    .modal-footer {
        border-top: 1px solid #e2e8f0;
    }

    /* Access Denied Styles */
    .access-denied-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f8fafc;
    }

    .access-denied-content {
        text-align: center;
        max-width: 500px;
        padding: 40px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .denied-icon {
        font-size: 60px;
        color: #ef4444;
        margin-bottom: 20px;
    }

    .access-denied-content h2 {
        color: #2d3748;
        margin-bottom: 15px;
        font-weight: 700;
    }

    .access-denied-content p {
        color: #64748b;
        margin-bottom: 10px;
    }

    .btn-return {
        margin-top: 20px;
        padding: 10px 25px;
        background-color: #3b82f6;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-return:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
        }
</style>

@code {
    private string A_id;
    private string token;
    public string role;
    private List<FinancialReportModel> reports = new List<FinancialReportModel>();
    private List<FinancialReportModel> filteredReports = new List<FinancialReportModel>();
    private FinancialReportModel newReport = new FinancialReportModel();
    private FinancialReportModel editReport = new FinancialReportModel();
    private FinancialReportModel generateReport = new FinancialReportModel();
    private FinancialReportModel selectedReport;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showGenerateModal = false;
    private bool showDetailsModal = false;
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            token = await SessionStorage.GetItemAsync<string>("authToken");
            var claims = RoleFetch.ParseClaimsFromJwt(token);
            var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            role = roleClaim?.Value;

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            if (role == "Admin")
            {
                var client = HttpClientFactory.CreateClient("AuthApi");
                var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
                var response1 = await client.GetAsync(url);

                if (response1.IsSuccessStatusCode)
                {
                    A_id = await response1.Content.ReadAsStringAsync();
                    await LoadReports();
                }
            }
            else
            {
                await SessionStorage.RemoveItemAsync("authToken");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing financial reports: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadReports()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var client = HttpClientFactory.CreateClient("AuthApi");
            reports = await client.GetFromJsonAsync<List<FinancialReportModel>>($"api/FinancialReports?A_id={A_id}");
            filteredReports = reports;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading reports: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterReports()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredReports = reports;
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredReports = reports.Where(r =>
                r.Title.ToLower().Contains(term) ||
                r.Description.ToLower().Contains(term) ||
                r.ReportID.ToLower().Contains(term) ||
                r.StartDate.ToString("d").Contains(term) ||
                r.EndDate.ToString("d").Contains(term)
            ).ToList();
        }
    }

    private void OpenCreateModal()
    {
        newReport = new FinancialReportModel
        {
            ReportID = Guid.NewGuid().ToString(),
            StartDate = DateTime.Now.AddMonths(-1),
            EndDate = DateTime.Now
        };
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private void OpenEditModal(FinancialReportModel report)
    {
        editReport = new FinancialReportModel
        {
            ReportID = report.ReportID,
            Title = report.Title,
            Description = report.Description,
            StartDate = report.StartDate,
            EndDate = report.EndDate,
            TotalIncome = report.TotalIncome,
            TotalExpenses = report.TotalExpenses,
            NetBalance = report.NetBalance,
            A_id = report.A_id
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
    }

    private void ToggleGenerateModal()
    {
        generateReport = new FinancialReportModel
        {
            ReportID = Guid.NewGuid().ToString(),
            StartDate = DateTime.Now.AddMonths(-1),
            EndDate = DateTime.Now
        };
        showGenerateModal = !showGenerateModal;
    }

    private void ToggleDetailsModal()
    {
        showDetailsModal = !showDetailsModal;
    }

    private bool IsValidReport(FinancialReportModel report)
    {
        return !string.IsNullOrWhiteSpace(report.Title) &&
               !string.IsNullOrWhiteSpace(report.ReportID) &&
               report.StartDate <= report.EndDate &&
               report.TotalIncome >= 0 &&
               report.TotalExpenses >= 0;
    }

    private bool IsValidGenerateRequest(FinancialReportModel report)
    {
        return !string.IsNullOrWhiteSpace(report.Title) &&
               !string.IsNullOrWhiteSpace(report.ReportID) &&
               report.StartDate <= report.EndDate;
    }

    private async Task CreateReport()
    {
        try
        {
            newReport.A_id = A_id;
            newReport.NetBalance = newReport.TotalIncome - newReport.TotalExpenses;

            var client = HttpClientFactory.CreateClient("AuthApi");
            var response = await client.PostAsJsonAsync("api/FinancialReports", newReport);

            if (response.IsSuccessStatusCode)
            {
                await LoadReports();
                CloseCreateModal();
                await JSRuntime.InvokeVoidAsync("alert", "Report created successfully");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                await JSRuntime.InvokeVoidAsync("alert", "A report with this ID already exists");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error creating report");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task UpdateReport()
    {
        try
        {
            editReport.A_id = A_id;
            editReport.NetBalance = editReport.TotalIncome - editReport.TotalExpenses;

            var client = HttpClientFactory.CreateClient("AuthApi");
            var response = await client.PutAsJsonAsync("api/FinancialReports", editReport);

            if (response.IsSuccessStatusCode)
            {
                await LoadReports();
                CloseEditModal();
                await JSRuntime.InvokeVoidAsync("alert", "Report updated successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error updating report");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task GenerateReport()
    {
        try
        {
            generateReport.A_id = A_id;

            var client = HttpClientFactory.CreateClient("AuthApi");
            var response = await client.PostAsJsonAsync("api/FinancialReports/Generate", generateReport);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<FinancialReportModel>();
                reports.Insert(0, result);
                filteredReports = reports;
                ToggleGenerateModal();
                await JSRuntime.InvokeVoidAsync("alert", "Report generated successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error generating report");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void ViewReportDetails(FinancialReportModel report)
    {
        selectedReport = report;
        ToggleDetailsModal();
    }

  
    private async Task DeleteReport(FinancialReportModel report)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the report '{report.Title}'?"))
        {
            try
            {
                var client = HttpClientFactory.CreateClient("AuthApi");
                var response = await client.DeleteAsync($"api/FinancialReports?ReportID={report.ReportID}");

                if (response.IsSuccessStatusCode)
                {
                    reports.Remove(report);
                    filteredReports = reports.ToList();
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("alert", "Report deleted successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting report");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }

    private async Task PrintReport(FinancialReportModel report)
    {
        try
        {
            // Create memory stream for PDF
            using var memoryStream = new MemoryStream();

            // Create PDF document
            var document = new Document(PageSize.A4, 50, 50, 25, 25);
            var writer = PdfWriter.GetInstance(document, memoryStream);

            document.Open();

            // Add title
            var titleFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 18);
            var title = new Paragraph(report.Title, titleFont)
                {
                    Alignment = Element.ALIGN_CENTER,
                    SpacingAfter = 20f
                };
            document.Add(title);

            // Add report metadata
            var normalFont = FontFactory.GetFont(FontFactory.HELVETICA, 12);
            var boldFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);

            var metadataTable = new PdfPTable(2)
                {
                    WidthPercentage = 100,
                    SpacingAfter = 20f
                };

            metadataTable.AddCell(new Phrase("Report ID:", boldFont));
            metadataTable.AddCell(new Phrase(report.ReportID, normalFont));
            metadataTable.AddCell(new Phrase("Period:", boldFont));
            metadataTable.AddCell(new Phrase($"{report.StartDate:MMM d, yyyy} to {report.EndDate:MMM d, yyyy}", normalFont));
            metadataTable.AddCell(new Phrase("Generated On:", boldFont));
            metadataTable.AddCell(new Phrase($"{DateTime.Now:MMM d, yyyy}", normalFont));

            document.Add(metadataTable);

            // Add description if exists
            if (!string.IsNullOrEmpty(report.Description))
            {
                var description = new Paragraph(report.Description, normalFont)
                    {
                        SpacingAfter = 20f
                    };
                document.Add(description);
            }

            // Add financial summary
            var summaryTable = new PdfPTable(3)
                {
                    WidthPercentage = 100,
                    SpacingAfter = 30f
                };

            // Table headers
            summaryTable.AddCell(new Phrase("Category", boldFont));
            summaryTable.AddCell(new Phrase("Amount", boldFont));
            summaryTable.AddCell(new Phrase("Status", boldFont));

            // Income row
            summaryTable.AddCell(new Phrase("Total Income", normalFont));
            summaryTable.AddCell(new Phrase(report.TotalIncome.ToString("C"), normalFont));
            summaryTable.AddCell(new Phrase("", normalFont));

            // Expenses row
            summaryTable.AddCell(new Phrase("Total Expenses", normalFont));
            summaryTable.AddCell(new Phrase(report.TotalExpenses.ToString("C"), normalFont));
            summaryTable.AddCell(new Phrase("", normalFont));

            // Net balance row with colored text
            var netBalanceCell = new Phrase(report.NetBalance.ToString("C"),
                FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12,
                    report.NetBalance >= 0 ? BaseColor.Green : BaseColor.Red));

            summaryTable.AddCell(new Phrase("Net Balance", boldFont));
            summaryTable.AddCell(netBalanceCell);
            summaryTable.AddCell(new Phrase(report.NetBalance >= 0 ? "Profit" : "Loss", normalFont));

            document.Add(summaryTable);

            // Close document
            document.Close();

            // Trigger download
            var fileName = $"FinancialReport_{report.ReportID.Substring(0, 8)}.pdf";
            await DownloadFile(fileName, memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error generating PDF: {ex.Message}");
        }
    }

    private async Task DownloadFile(string filename, byte[] data)
    {
        // Convert byte array to base64 string
        var base64 = Convert.ToBase64String(data);

        // Create download link and trigger click
        await JSRuntime.InvokeVoidAsync("eval",
                $@"(function() {{
                const link = document.createElement('a');
                link.download = '{filename}';
                link.href = 'data:application/pdf;base64,{base64}';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }})()");
    }

    private async Task NavigateToAppropriatePage()
    {
        await SessionStorage.RemoveItemAsync("authToken");
        Navigation.NavigateTo(role == "Shopkeeper" ? "/logingrocery" : "/");
    }
}