@page "/resident-bills"
@rendermode InteractiveServer
@using System.Collections.Generic
@using System.Linq
@using ClassLibraryModel
@using DALLibrary
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@using Blazored.SessionStorage
@using System.Security.Claims
@inject ISessionStorageService SessionStorage

@if (role == "Admin")
{
    <div class="page-container">
        <Sidebars></Sidebars>
        <div class="main-content">
            <div class="card bill-card">
                <div class="card-header">
                    <h3 class="card-title">Create Individual Bill</h3>
                    <p class="card-subtitle">Generate bill for a specific resident</p>
                </div>

                <div class="card-body">
                    <!-- Search Section -->
                    <div class="search-section">
                        <div class="search-group">
                            <input @bind="searchQuery" class="search-input" placeholder="Search by name or CNIC..." />
                            <button @onclick="SearchResident" class="search-button">
                                <i class="search-icon">🔍</i> Search
                            </button>
                        </div>

                        @if (searchResults?.Any() ?? false)
                        {
                            <div class="results-container">
                                @foreach (var resident in searchResults)
                                {
                                    <div class="resident-card" @onclick="() => SelectResident(resident)">
                                        <div class="resident-info">
                                            <span class="resident-name">@resident.Names</span>
                                            <span class="resident-cnic">@FormatCnic(resident.CNIC)</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else if (hasSearched && !(searchResults?.Any() ?? false))
                        {
                            <div class="no-results">No residents found matching your search</div>
                        }
                    </div>

                    <!-- Selected Resident Display -->
                    @if (selectedResident != null)
                    {
                        <div class="selected-resident">
                            <div class="selected-header">
                                <span>Selected Resident:</span>
                                <button @onclick="ClearSelection" class="clear-button">×</button>
                            </div>
                            <div class="selected-details">
                                <div>
                                    <strong>Name:</strong> @selectedResident.Names
                                </div>
                                <div>
                                    <strong>CNIC:</strong> @FormatCnic(selectedResident.CNIC)
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Bill Form -->
                    <form @onsubmit="HandleSubmit" class="@(selectedResident == null ? "form-disabled" : "")">
                        <div class="form-grid">
                            <div class="form-group">
                                <label class="form-label">Item Description</label>
                                <input @bind="bill.Item" type="text" class="form-control" placeholder="Enter item description" required />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text">Rs.</span>
                                    <input @bind="bill.Price" type="number" step="1" class="form-control" placeholder="0.00" required />
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Status</label>
                                <select @bind="bill.Statuss" class="form-select" required>
                                    <option value="">Select Status</option>
                                    <option value="Paid">Paid</option>
                                    <option value="Pending">Pending</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Fine Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text">Rs.</span>
                                    <input @bind="bill.Fine" type="number" step="1" class="form-control" placeholder="0.00" required />
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Issue Date</label>
                                <input @bind="bill.IssueDate" type="date" class="form-control" required />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Due Date</label>
                                <input @bind="bill.DueDate" type="date" class="form-control" required />
                            </div>
                        </div>

                        <div class="form-footer">
                            <button type="submit" class="btn-primary" disabled="@(isProcessing || selectedResident == null)">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Processing...</span>
                                }
                                else
                                {
                                    <span>Generate Bill</span>
                                }
                            </button>
                        </div>
                    </form>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @(isError ? "alert-danger" : "alert-success")">
                            @message
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<style>
    .page-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
    }

    .main-content {
        flex: 1;
        padding: 20px;
        background-color: #f8f9fa;
    }

    .bill-card {
        max-width: 800px;
        margin: 0 auto;
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .card-header {
        background-color: #1b6cb9;
        color: white;
        padding: 1.5rem;
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .card-subtitle {
        opacity: 0.9;
        font-size: 0.875rem;
        margin-bottom: 0;
    }

    .card-body {
        padding: 2rem;
        background-color: white;
    }

    /* Search Section Styles */
    .search-section {
        margin-bottom: 1.5rem;
    }

    .search-group {
        display: flex;
        margin-bottom: 1rem;
    }

    .search-input {
        flex: 1;
        padding: 0.5rem 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 6px 0 0 6px;
        transition: border-color 0.2s;
    }

        .search-input:focus {
            border-color: #1b6cb9;
            outline: none;
            box-shadow: 0 0 0 3px rgba(27, 108, 185, 0.1);
        }

    .search-button {
        background-color: #1b6cb9;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0 6px 6px 0;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .search-button:hover {
            background-color: #155a9e;
        }

    .search-icon {
        margin-right: 0.5rem;
    }

    /* Results Container */
    .results-container {
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        max-height: 200px;
        overflow-y: auto;
    }

    .resident-card {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f1f5f9;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .resident-card:hover {
            background-color: #f8fafc;
        }

        .resident-card:last-child {
            border-bottom: none;
        }

    .resident-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.25rem;
    }

    .resident-name {
        font-weight: 500;
    }

    .resident-cnic {
        color: #64748b;
        font-size: 0.875rem;
    }

    .no-results {
        padding: 1rem;
        text-align: center;
        color: #64748b;
    }

    /* Selected Resident */
    .selected-resident {
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        background-color: #f8fafc;
    }

    .selected-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .clear-button {
        background: none;
        border: none;
        color: #64748b;
        cursor: pointer;
        font-size: 1.25rem;
        line-height: 1;
    }

        .clear-button:hover {
            color: #1b6cb9;
        }

    .selected-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.5rem;
    }

    /* Form Styles */
    .form-disabled {
        opacity: 0.6;
        pointer-events: none;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #334155;
    }

    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        transition: border-color 0.2s;
    }

        .form-control:focus, .form-select:focus {
            border-color: #1b6cb9;
            outline: none;
            box-shadow: 0 0 0 3px rgba(27, 108, 185, 0.1);
        }

    .input-group {
        display: flex;
    }

    .input-group-text {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-right: none;
        padding: 0.5rem 0.75rem;
        border-radius: 6px 0 0 6px;
    }

    .input-group .form-control {
        border-radius: 0 6px 6px 0;
    }

    .form-footer {
        display: flex;
        justify-content: flex-end;
        padding-top: 1rem;
        border-top: 1px solid #f1f5f9;
    }

    .btn-primary {
        background-color: #1b6cb9;
        color: white;
        border: none;
        padding: 0.625rem 1.25rem;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .btn-primary:hover {
            background-color: #155a9e;
        }

        .btn-primary:disabled {
            background-color: #9dbad8;
            cursor: not-allowed;
        }

    .alert {
        padding: 1rem;
        border-radius: 6px;
        margin-top: 1.5rem;
    }

    .alert-success {
        background-color: #f0fdf4;
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    .alert-danger {
        background-color: #fef2f2;
        color: #991b1b;
        border: 1px solid #fecaca;
    }

    .spinner-border {
        vertical-align: middle;
    }
</style>

@code {
    private List<Resident> allResidents = new List<Resident>();
    private List<Resident> searchResults = new List<Resident>();
    private Resident? selectedResident = null;
    private BillModel bill = new BillModel
        {
            IssueDate = DateTime.Today,
            DueDate = DateTime.Today.AddDays(30),
            Statuss = "Unpaid"
        };
    private string searchQuery = "";
    private string message = "";
    private bool isError = false;
    private bool isProcessing = false;
    private bool hasSearched = false;

    private string A_id;
    private string token;
    public string role;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await SessionStorage.GetItemAsync<string>("authToken");
                var claims = RoleFetch.ParseClaimsFromJwt(token);
                var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                role = roleClaim?.Value;
                await LoadAllResidents();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving token: {ex.Message}");
            }
        }
    }

    private async Task LoadAllResidents()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthApi");
            var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
            var response1 = await client.GetAsync(url);

            if (response1.IsSuccessStatusCode)
            {
                A_id = await response1.Content.ReadAsStringAsync();
                var response = await client.GetAsync($"api/Resident?A_id={A_id}");

                if (response.IsSuccessStatusCode)
                {
                    allResidents = await response.Content.ReadFromJsonAsync<List<Resident>>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading residents: {ex.Message}");
        }
    }

    private void SearchResident()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            searchResults = new List<Resident>();
            hasSearched = false;
            return;
        }

        var query = searchQuery.Trim().ToLower();
        searchResults = allResidents
            .Where(r => r.Names.ToLower().Contains(query) ||
                       (r.CNIC?.Contains(query) ?? false))
            .ToList();

        hasSearched = true;
    }

    private void SelectResident(Resident resident)
    {
        selectedResident = resident;
        searchResults = new List<Resident>();
        searchQuery = "";
        hasSearched = false;
    }

    private void ClearSelection()
    {
        selectedResident = null;
    }

    private string FormatCnic(string cnic)
    {
        if (string.IsNullOrEmpty(cnic) || cnic.Length != 13) return cnic;
        return $"{cnic.Substring(0, 5)}-{cnic.Substring(5, 7)}-{cnic.Substring(12)}";
    }

    private async Task HandleSubmit()
    {
        if (selectedResident == null) return;

        isProcessing = true;
        isError = false;
        message = "";
        StateHasChanged();

        try
        {
            var client = HttpClientFactory.CreateClient("AuthApi");

            var billToSend = new BillModel
                {
                    BID = Guid.NewGuid().ToString(),
                    Item = bill.Item,
                    Price = bill.Price,
                    Statuss = bill.Statuss,
                    IssueDate = bill.IssueDate,
                    DueDate = bill.DueDate,
                    Fine = bill.Fine,
                    CNIC = selectedResident.CNIC
                };

            var response = await client.PostAsJsonAsync("api/Bill", billToSend);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to create bill: {errorContent}");
            }

            message = $"Bill generated successfully for {selectedResident.Names}";
            bill = new BillModel
                {
                    IssueDate = DateTime.Today,
                    DueDate = DateTime.Today.AddDays(30),
                    Statuss = "Unpaid"
                };
        }
        catch (Exception ex)
        {
            isError = true;
            message = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}