@page "/residents"
@rendermode InteractiveServer
@using System.Collections.Generic
@using System.Linq
@using ClassLibraryModel
@using DALLibrary
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@using Blazored.SessionStorage
@using System.Security.Claims
@inject ISessionStorageService SessionStorage

@if (role == "Admin")
{
        <div style="display: flex; flex-direction: row; background-color: #f8f9fa;">
            <Sidebars></Sidebars>
            <div style="width: 80%; margin: 40px;">
                <div style="background-color: white; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px;">
                    <h2 style="text-align: center; margin-bottom: 20px; color: #333;">Residents Management</h2>

                    <!-- Search Box -->
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <input @bind="searchText" style="width: 60%; padding: 10px; border-radius: 5px; border: 1px solid #ccc;" placeholder="Search by CNIC, Name, Contact, or A_Id" />
                    <button style="background-color: #1b6cb9; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="SearchResidents">Search</button>
                    </div>

                    <!-- Add Resident Button -->
                    <div style="text-align: right; margin-bottom: 20px;">
                    <button style="background-color: #1b6cb9; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="AddNewResident">Add Resident</button>
                    </div>
                             <!-- Resident Form -->
                @if (showForm)
                {
                                    <div style="margin-top: 20px;">
                        @if (currentResident.CNIC == null)
                        {
                                                    <ResidentForm Resident="currentResident" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                        else
                        {
                                                    <UpdateResidentForm Resident="currentResident" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                                    </div>
                }

                    <!-- Data Table -->
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                        <tr style="background-color: #1b6cb9; color: white;">
                            <!--<th style="padding: 10px; border: 1px solid #ddd;">Icon</th>-->
                            <th style="padding: 10px; border: 1px solid #ddd;">CNIC</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Name</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Contact</th>
                                
                                <th style="padding: 10px; border: 1px solid #ddd;">Password</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        @if (filteredResidents.Any())
                        {
                            @foreach (var resident in filteredResidents)
                            {
                                
                                            <tr style="background-color: #f8f9fa;">
                                    <!--
                                                             <td style="padding: 10px; border: 1px solid #ddd;">

                                                             <img src=@resident.Picture width=30px height=30px />


                                                         </td>

                                -->
                                                <td style="padding: 10px; border: 1px solid #ddd;">@resident.CNIC</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@resident.Names</td>
                                                <td style="padding: 10px; border: 1px solid #ddd;">@resident.Contact</td>
                                               
                                                <td style="padding: 10px; border: 1px solid #ddd;">@resident.Passwords</td>
                                                <td style="padding: 10px; border: 1px solid #ddd; text-align: center;">
                                        <button style="background-color:#1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; margin-right: 5px; cursor: pointer;" @onclick="() => EditResident(resident)">Update</button>
                                        <button style="background-color: #1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; cursor: pointer;" @onclick="() => DeleteResident(resident.CNIC)">Delete</button>
                                                </td>
                                            </tr>
                            }
                        }
                        else
                        {
                                    <tr>
                                        <td colspan="6" style="padding: 20px; text-align: center; color: #888;">No residents found</td>
                                    </tr>
                        }
                        </tbody>
                    </table>

               
                </div>
            </div>
        </div>
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        color: #333;
    }

    table th, table td {
        text-align: left;
    }

    table th {
        text-align: center;
    }
</style>

@code {
    private List<Resident> residents = new List<Resident>();
    private List<Resident> filteredResidents = new List<Resident>();
    private Resident currentResident;
    private bool showForm;
    private string A_id;
    private string token;
    public string role;
    private string searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await SessionStorage.GetItemAsync<string>("authToken");
                var claims = RoleFetch.ParseClaimsFromJwt(token);
                var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                role = roleClaim.Value;
                StateHasChanged();
                await LoadResident();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving token: {ex.Message}");
            }
        }

    }

    private async Task LoadResident()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
        var response1 = await client.GetAsync(url);
        if (response1.IsSuccessStatusCode)
        {
            A_id = await response1.Content.ReadAsStringAsync();
            var response = await client.GetAsync($"api/Resident?A_id={A_id}");
            if (response.IsSuccessStatusCode)
            {
                residents = await response.Content.ReadFromJsonAsync<List<Resident>>();
                filteredResidents = residents; // Initialize filtered list with all residents
            }
        }
    }

    private void AddNewResident()
    {
        currentResident = new Resident(); // Initialize a new Resident for adding
        showForm = true;

    }

    private void EditResident(Resident resident)
    {
        currentResident = resident; // Use the selected resident for editing
        showForm = true;

    }

    private async void DeleteResident(string cnic)
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var response = await client.DeleteAsync($"api/Resident?CNIC={cnic}");

        if (response.IsSuccessStatusCode)
        {
            // Remove the resident from the list
            var residentToRemove = residents.FirstOrDefault(r => r.CNIC == cnic);
            if (residentToRemove != null)
            {
                residents.Remove(residentToRemove);
                filteredResidents.Remove(residentToRemove);
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to delete resident with CNIC {cnic}. Status code: {response.StatusCode}");
        }
    }

    private async void HandleSave(Resident savedResident)
    {
       await LoadResident();
        showForm = false; // Hide the form after saving
        StateHasChanged(); // Trigger UI update
    }

    private void HandleCancel()
    {
        showForm = false; // Hide the form without saving
    }

    private void SearchResidents()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredResidents = residents;
        }
        else
        {
            filteredResidents = residents.Where(r =>
                r.CNIC.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                r.Names.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                r.Contact.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                r.A_id.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
