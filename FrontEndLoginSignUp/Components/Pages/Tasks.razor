@page "/tasks"
@rendermode InteractiveServer
@using System.Collections.Generic
@using System.Linq
@using ClassLibraryModel
@using DALLibrary
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@using Blazored.SessionStorage
@using System.Security.Claims
@inject ISessionStorageService SessionStorage

@if (role == "Admin")
{
    <div style="display: flex; flex-direction: row; background-color: #f8f9fa;">
        <Sidebars></Sidebars>
        <div style="width: 80%; margin: 40px;">
            <div style="background-color: white; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px;">
                <h2 style="text-align: center; margin-bottom: 20px; color: #333;">Task Management</h2>

                <!-- Search Box -->
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <input @bind="searchText" style="width: 60%; padding: 10px; border-radius: 5px; border: 1px solid #ccc;" placeholder="Search by Task Name or Profession" />
                    <button style="background-color: #1b6cb9; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="SearchTasks">Search</button>
                </div>

                <!-- Add Task Button -->
                <div style="text-align: right; margin-bottom: 20px;">
                    <button style="background-color: #1b6cb9; border: none; padding: 10px 20px; border-radius: 5px; color: white; cursor: pointer;" @onclick="AddNewTask">Add Task</button>
                </div>

                <!-- Task Form -->
                @if (showForm)
                {
                    <div style="margin-top: 20px;">
                        @if (currentTask.Task_id==null)
                        {
                            <TaskForm Task="currentTask" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                        else
                        {
                            <UpdateTaskForm Task="currentTask" OnSave="HandleSave" OnCancel="HandleCancel" />
                        }
                    </div>
                }

                <!-- Data Table -->
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="background-color: #1b6cb9; color: white;">
                     
                            <th style="padding: 10px; border: 1px solid #ddd;">Task Name</th>
                            <th style="padding: 10px; border: 1px solid #ddd;">Profession</th>
                            <th style="padding: 10px; border: 1px solid #ddd;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @if (filteredTasks.Any())
                    {
                        @foreach (var task in filteredTasks)
                        {
                            <tr style="background-color: #f8f9fa;">
                     
                                <td style="padding: 10px; border: 1px solid #ddd;">@task.Task_name</td>
                                <td style="padding: 10px; border: 1px solid #ddd;">@task.profession</td>
                                <td style="padding: 10px; border: 1px solid #ddd; text-align: center;">
                                    <button style="background-color:#1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; margin-right: 5px; cursor: pointer;" @onclick="() => EditTask(task)">Update</button>
                                    <button style="background-color: #1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; cursor: pointer;" @onclick="() => DeleteTask(task.Task_id)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" style="padding: 20px; text-align: center; color: #888;">No tasks found</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private List<TaskModel> taskList = new List<TaskModel>();
    private List<TaskModel> filteredTasks = new List<TaskModel>();
    private TaskModel currentTask;
    private bool showForm;
    private string A_id;
    private string token;
    public string role;
    private string searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await SessionStorage.GetItemAsync<string>("authToken");
                var claims = RoleFetch.ParseClaimsFromJwt(token);
                var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                role = roleClaim.Value;
                StateHasChanged();
                await LoadTasks();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving token: {ex.Message}");
            }
        }
    }

    private async Task LoadTasks()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var url = $"api/Admin/AdminID?HS_Name={UserService.Username}";
        var response1 = await client.GetAsync(url);
        if (response1.IsSuccessStatusCode)
        {
            A_id = await response1.Content.ReadAsStringAsync();
            var response = await client.GetAsync($"api/Task?A_id={A_id}");
            if (response.IsSuccessStatusCode)
            {
                taskList = await response.Content.ReadFromJsonAsync<List<TaskModel>>();
                filteredTasks = taskList;
            }
        }
    }

    private void AddNewTask()
    {
        currentTask = new TaskModel();
        showForm = true;
    }

    private void EditTask(TaskModel task)
    {
        currentTask = task;
        showForm = true;
    }

    private async void DeleteTask(string taskId)
    {
        var client = HttpClientFactory.CreateClient("AuthApi");
        var response = await client.DeleteAsync($"api/Task?Task_id={taskId}");

        if (response.IsSuccessStatusCode)
        {
            var taskToRemove = taskList.FirstOrDefault(t => t.Task_id == taskId);
            if (taskToRemove != null)
            {
                taskList.Remove(taskToRemove);
                filteredTasks.Remove(taskToRemove);
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to delete task with ID {taskId}. Status code: {response.StatusCode}");
        }
    }

    private async void HandleSave(TaskModel savedTask)
    {
        await LoadTasks();
        showForm = false;
        StateHasChanged();
    }

    private void HandleCancel()
    {
        showForm = false;
    }

    private void SearchTasks()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredTasks = taskList;
        }
        else
        {
            filteredTasks = taskList.Where(t =>
                t.Task_name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                t.profession.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
