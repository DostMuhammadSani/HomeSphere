@using System.ComponentModel.DataAnnotations
@using ClassLibraryModel
@using DALLibrary
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService

<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title">Update Store</h4>
        <EditForm Model="Store" OnValidSubmit="HandleUpdateClick">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="storeId">Store ID</label>
                <InputText id="storeId" class="form-control" @bind-Value="Store.StoreID" disabled />
            </div>
            <div class="form-group">
                <label for="storeName">Store Name</label>
                <InputText id="storeName" class="form-control" @bind-Value="Store.StoreName" required />
            </div>
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="Store.Username" disabled />
            </div>
            <div class="form-group">
                <label for="location">Location</label>
                <InputTextArea id="location" class="form-control" @bind-Value="Store.Locations" required />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="Store.Passwords" required />
            </div>
            <div class="form-group">
                <label for="contact">Contact</label>
                <InputText id="contact" class="form-control" @bind-Value="Store.Contact" required />
            </div>
            <div class="form-group">
                <button type="submit" style="background-color:#1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; margin-right: 5px; cursor: pointer;" class="btn btn-primary">Update</button>
                <button type="button" style="background-color:#1b6cb9; border: none; padding: 5px 10px; border-radius: 5px; color: white; margin-right: 5px; cursor: pointer;" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success mt-3">
                @SuccessMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-3">
                @ErrorMessage
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public StoreModel Store { get; set; }
    [Parameter] public EventCallback<StoreModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    public string HS_Name { get; set; }
    public string ErrorMessage { get; set; }
    public string SuccessMessage { get; set; }

    protected override void OnInitialized()
    {
        HS_Name = UserService.Username;
        base.OnInitialized();
    }

    private async Task HandleUpdateClick()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        try
        {
            var client = HttpClientFactory.CreateClient("AuthApi");
            var url = $"api/Admin/AdminID?HS_Name={HS_Name}";
            var response1 = await client.GetAsync(url);

            if (response1.IsSuccessStatusCode)
            {
                Store.A_id = await response1.Content.ReadAsStringAsync();

                // Step 1: Update Store Information
                var shopkeeperResponse = await client.PutAsJsonAsync($"api/Auth/updateshopkeeper/{Store.Username}", Store);

                
                if (shopkeeperResponse.IsSuccessStatusCode)
                {
                    // Step 2: Update Shopkeeper (username + password in Identity system)
                    var storeResponse = await client.PutAsJsonAsync("api/Stores", Store);

                    if (storeResponse.IsSuccessStatusCode)
                    {
                        SuccessMessage = "Store and shopkeeper updated successfully.";
                        await OnSave.InvokeAsync(Store);
                    }
                    else
                    {
                        var errorContent = await storeResponse.Content.ReadAsStringAsync();

                        ErrorMessage = $"Failed to update store: {errorContent}";

                    }
                }
                else
                {
                    var errorContent = await shopkeeperResponse.Content.ReadAsStringAsync();
                    ErrorMessage = $" Failed to update : {errorContent}";
                }
            }
            else
            {
                ErrorMessage = "Invalid Housing Society Name.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        OnCancel.InvokeAsync();
    }
}